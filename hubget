#!/bin/bash
# Created by: WestleyK
# Email: westley@sylabs.io
# version-1.3.1
# Date: Nov 3, 2018
# https://github.com/WestleyK/easy-clone
#
#
# MIT License
#
# Copyright (c) 2018 WestleyK
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
#

set -e

VERSION_HUBGET="version-1.3.1"
HUBGET_DATE="Nov 3, 2018"

BUG_FILE="/tmp/debug_hubget_$VERSION_HUBGET.txt"

UP_URL="https://raw.githubusercontent.com/WestleyK/easy-clone/master/script-version.txt"
#ZIP_FILE="master.zip"

if ! [ -x "$(command -v ecgo)" ]; then
    echo "ERROR: need: ecgo"
    echo "please install ecgo"
    echo "https://github.com/WestleyK/ecgo"
    exit 1        
fi

help_menu() {
    ecgo -n -white "usage: " && ecgo -n -green "$0" && ecgo -blue " [OPTION] [USRNAME/REPO_NAME]"
    ecgo -n -yello "      -h, -help, --help           " && ecgo -teal ": print help menu."
    ecgo -n -yello "      -c, -check, -check_update   " && ecgo -teal ": check for update."
    ecgo -n -yello "      -nu, -no_update             " && ecgo -teal ": don't check for updates."
    ecgo -n -yello "      -clearbug, -clear_bug       " && ecgo -teal ": clear debug file: $BUG_FILE."
    ecgo -n -yello "      -v, -version, --version     " && ecgo -teal ": print script version."
    ecgo -white "source code: https://github.con/WestleyK/easy-clone"
    exit 0
}

print_version() {
    ecgo -teal $VERSION_HUBGET
    ecgo -green $HUBGET_DATE
    ecgo -blue "Source code: https://github.com/WestleyK/easy-clone"
    exit 0
}

debug_output() {
    DATE_RUN=` date `
    ecgo "" >> $BUG_FILE
    ecgo "" >> $BUG_FILE
    ecgo "" >> $BUG_FILE
    ecgo "" >> $BUG_FILE
    ecgo $DATE_RUN >> $BUG_FILE
    ecgo "expecting: $ERROR_EX" >> $BUG_FILE
    ecgo "actral: $ERROR_BUG" >> $BUG_FILE
}

only_one_arg() {
    if [ ! -n $2 ]; then
        ecgo -red "ERROR: $OPTION flag only needs one argument!"
        ecgo -red " eg. >> $ hubget $OPTION"
        exit 1
    fi
}

check_update() {
    only_one_arg
    ecgo -teal "=> Checking for update..."
    NEW_V=` curl -s $UP_URL `
    if [[ "$NEW_V" != "version"* ]]; then
        ERROR_EX="version*"
        ERROR_BUG=$NEW_V
        debug_output
        ecgo -red "ERROR: an error has occurred"
        ecgo -red " Unable to check for update."
        ecgo 
        ecgo -red "FAIL: check for update failed!"
        ecgo " Try: "
        ecgo " >> $ cat $BUG_FILE  (for debug)"
        exit 1
    fi
    if [[ "$NEW_V" != "$VERSION_HUBGET" ]]; then
        ecgo -blue "INFO: An update is avalable."
        ecgo -green " Your hubget version: $VERSION_HUBGET"
        ecgo -green " New version: $NEW_V"
        ecgo -green " Do: "
        ecgo -green " >> $ cd ~/easy-clone/  (or wherever it is)"
        ecgo -green " >> $ ./update.sh  (to update hubget)"
        exit 0
    else
        ecgo -blue "=> INFO: hubget is at latest version: $NEW_V"
    fi
        exit 0
}

clear_bug() {
    only_one_arg
    ecgo -blue "=> Clearing: $BUG_FILE"
    if [ ! -f $BUG_FILE ]; then
        ecgo -red "ERROR: $BUG_FILE does not exist!"
        ecgo -red " no bugs reported yet."
        exit 1
    fi
        cat /dev/null > $BUG_FILE
        ecgo -blue "=> File cleared: $BUG_FILE"
        exit 0
}

source ~/easy-clone/auto-complete.sh

if [ -z $1 ]; then
    help_menu
fi


if [ ! -z $2 ]; then
    OPTION=$1
    REPO=$2
else
    REPO=$1
    OPTION=$1
fi

check_arg() {
    if [ "$OPTION" == "-h" ] || [ "$OPTION" == "-help" ] || [ "$OPTION" == "--help" ]; then
        help_menu
        return
    elif [ "$OPTION" == "-c" ] || [ "$OPTION" == "-check" ] || [ "$OPTION" == "-check_update" ]; then
        check_update
        return
    elif [ "$OPTION" == "-nu" ] || [ "$OPTION" == "-no_update" ]; then
        NO_UP="true"
        return
    elif [ "$OPTION" == "-clearbug" ] || [ "$OPTION" == "-clear_bug" ]; then
        clear_bug
        return
    elif [ "$OPTION" == "-v" ] || [ "$OPTION" == "-version" ] || [ "$OPTION" == "--version" ]; then
        print_version
        return
    elif [[ "$OPTION" == "-"* ]]; then
        ecgo -red "Option not found! :P  $OPTION"
        exit 1
    fi
}

check_arg

if [ "$NO_UP" == "true" ]; then
    if [ -z $2 ]; then
        ecgo -red "ERROR: $OPTION flag needs at least two arguments!"
        ecgo -red " only revived one!"
        ecgo -red " eg. >> $ hubget $OPTION WestleyK/easy-clone"
        exit 1
    fi
fi

NAME=` ecgo $REPO | rev | cut -f1 -d"/" | rev `
ecgo -blue -n "=> INFO: "
ecgo "Repo name: '$NAME'"

if [ -d $NAME ]; then
    ecgo -red "FATAL ERROR:"
    ecgo -red "'$NAME'  already exist!"
    exit 1
fi

#if [ -f $ZIP_FILE ]; then
#    ecgo "FATAL ERROR:"
#    ecgo "'$ZIP_FILE'  already exist!"
#    exit 1
#fi

ecgo -blue "=> Cloning repo..."
URL="$( ecgo "https://github.com/"$REPO )"

#wget -O /tmp/output_hubget_url_test.txt $URL
#rm -f /tmp/output_hubget_url_test.txt

IF_URL=` curl -s --head $URL | head -1 `
if [[ "$IF_URL" != *"OK"* ]]; then
    ecgo -red "ERROR: URL not found."
    exit 1
fi

git clone $URL

#unzip $ZIP_FILE
#mv $NAME-master $NAME

IS_FILE=` cat ~/easy-clone/option-url.txt `
if [[ "$IS_FILE" != *"$REPO"* ]]; then
    ecgo -blue "=> Adding $REPO to: ~/easy-clone/option-url.txt"
    ecgo $REPO >> ~/easy-clone/option-url.txt
fi

if [ "$NO_UP" != "true" ]; then
    ecgo -blue "=> Checking for update, because no '-nu' or '-no_update' flag was specified."
    check_update
    exit 0
fi

ecgo -green "Done."

exit 0


#
# End script
#
